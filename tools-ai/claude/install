#!/bin/bash

# Claude Code installation and configuration
# Configures Claude Code according to official documentation
# Part of dotfiles-ai repository

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../utils/common.sh"

detect_os

# Configuration
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
CLAUDE_DIR="$SCRIPT_DIR"

log_info "Configuring Claude Code with MCP servers..."

# Check if running in a desktop environment for Claude Desktop
has_desktop_environment() {
    if [[ -n "$DISPLAY" ]] || [[ -n "$WAYLAND_DISPLAY" ]] || [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
        return 0
    fi
    
    if [[ "$OS" == "macos" ]]; then
        return 0
    fi
    
    if command -v startx &>/dev/null || command -v gdm &>/dev/null || command -v lightdm &>/dev/null; then
        return 0
    fi
    
    return 1
}

# Install Node.js if needed (required for MCP servers)
install_node() {
    if command -v node &>/dev/null; then
        log_success "Node.js already installed: $(node --version)"
        return 0
    fi
    
    log_info "Installing Node.js via nvm..."
    if [[ -x "$DOTFILES_DIR/tools-lang/node/install" ]]; then
        "$DOTFILES_DIR/tools-lang/node/install"
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    else
        log_error "Cannot install Node.js. Please install manually."
        exit 1
    fi
}

# Install MCP servers
install_mcp_servers() {
    log_info "Installing MCP servers..."
    
    for server_dir in "$DOTFILES_DIR/tools-ai/mcp-"*; do
        if [[ -d "$server_dir" ]]; then
            server_name=$(basename "$server_dir")
            log_info "Installing $server_name..."
            
            if [[ -x "$server_dir/install" ]]; then
                "$server_dir/install"
            else
                log_warning "$server_name has no installer"
            fi
        fi
    done
    
    log_success "MCP servers installed"
}

# Setup GNU Stow structure for Claude Code configs
setup_stow_structure() {
    log_info "Setting up stow structure for Claude Code..."
    
    # Ensure the .claude directory exists in the stow structure
    mkdir -p "$CLAUDE_DIR/.claude"
    
    # Copy the settings template if it doesn't exist
    if [[ ! -f "$CLAUDE_DIR/.claude/settings.json" ]]; then
        log_error "settings.json template not found in $CLAUDE_DIR/.claude/"
        exit 1
    fi
    
    log_success "Stow structure ready"
}

# Update MCP server paths in settings.json
update_mcp_paths() {
    log_info "Updating MCP server paths in settings..."
    
    local settings_file="$CLAUDE_DIR/.claude/settings.json"
    
    # Use sed to update the paths to use the actual dotfiles directory
    sed -i.bak "s|/home/matt/dotfiles-ai|$DOTFILES_DIR|g" "$settings_file"
    rm -f "$settings_file.bak"
    
    log_success "MCP server paths updated"
}

# Setup Claude Desktop config if desktop environment exists
setup_claude_desktop() {
    if ! has_desktop_environment; then
        log_info "No desktop environment detected, skipping Claude Desktop config"
        return 0
    fi
    
    log_info "Setting up Claude Desktop configuration..."
    
    # Determine Claude Desktop config location based on OS
    local desktop_config_dir
    case "$OS" in
        macos)
            desktop_config_dir="$HOME/Library/Application Support/Claude"
            ;;
        *)
            desktop_config_dir="$HOME/.config/claude"
            ;;
    esac
    
    # Create directory if it doesn't exist
    mkdir -p "$desktop_config_dir"
    
    # Check if jq is installed
    if ! command -v jq &>/dev/null; then
        log_warning "jq not installed, skipping Claude Desktop config"
        return 0
    fi
    
    # Extract just the mcpServers section from our settings.json
    local mcp_config=$(jq '.mcpServers' "$CLAUDE_DIR/.claude/settings.json")
    
    # Create Claude Desktop config
    cat > "$desktop_config_dir/claude_desktop_config.json" << EOF
{
  "mcpServers": $mcp_config,
  "theme": "auto",
  "telemetry": false,
  "autoUpdate": true
}
EOF
    
    log_success "Claude Desktop configured at $desktop_config_dir/claude_desktop_config.json"
}

# Use GNU Stow to symlink configs
stow_configs() {
    log_info "Stowing Claude Code configuration..."
    
    # Ensure GNU Stow is installed
    if ! command -v stow &>/dev/null; then
        log_error "GNU Stow not installed. Please run main installer first."
        exit 1
    fi
    
    # Navigate to tools-ai directory for stowing
    cd "$DOTFILES_DIR/tools-ai"
    
    # Remove any existing symlinks that might conflict
    if [[ -L "$HOME/.claude/settings.json" ]]; then
        rm "$HOME/.claude/settings.json"
    fi
    
    # Backup existing settings if they exist and aren't symlinks
    if [[ -f "$HOME/.claude/settings.json" && ! -L "$HOME/.claude/settings.json" ]]; then
        log_info "Backing up existing settings.json..."
        mv "$HOME/.claude/settings.json" "$HOME/.claude/settings.json.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Stow the Claude configs
    stow -v -R -t "$HOME" claude
    
    log_success "Configuration files stowed"
}

# Create convenience scripts
create_scripts() {
    log_info "Creating convenience scripts..."
    
    # Create MCP test script
    cat > "$CLAUDE_DIR/test-mcp.sh" << 'EOF'
#!/bin/bash

echo "Testing MCP Servers for Claude Code"
echo "===================================="
echo ""

DOTFILES_DIR="$(cd "$(dirname "$0")/../.." && pwd)"

# Test each MCP server
for server in tmux neovim playwright; do
    echo "Testing mcp-$server..."
    server_dir="$DOTFILES_DIR/tools-ai/mcp-$server"
    
    if [[ -f "$server_dir/test-server.js" ]]; then
        node "$server_dir/test-server.js" 2>&1 | head -10
    elif [[ -f "$server_dir/server.js" ]]; then
        timeout 1 node "$server_dir/server.js" --test 2>&1 || echo "  Server started (timeout expected)"
    else
        echo "  ✗ Server not found"
    fi
    echo ""
done

echo "Claude Code Configuration:"
echo "-------------------------"
if [[ -f ~/.claude/settings.json ]]; then
    echo "✓ User settings: ~/.claude/settings.json"
    echo "  MCP servers configured:"
    jq -r '.mcpServers | keys[]' ~/.claude/settings.json 2>/dev/null | sed 's/^/    - /'
else
    echo "✗ User settings not found"
fi
EOF
    chmod +x "$CLAUDE_DIR/test-mcp.sh"
    
    # Create diagnostic script
    cat > "$CLAUDE_DIR/diagnose.sh" << 'EOF'
#!/bin/bash

echo "Claude Code Configuration Diagnostic"
echo "===================================="
echo ""

# Check Node.js
echo "Node.js:"
if command -v node &>/dev/null; then
    echo "  ✓ $(node --version)"
else
    echo "  ✗ Not installed"
fi

# Check Claude Code settings
echo ""
echo "Claude Code Settings:"
if [[ -f ~/.claude/settings.json ]]; then
    echo "  ✓ User settings exists"
    if [[ -L ~/.claude/settings.json ]]; then
        echo "    Symlinked to: $(readlink ~/.claude/settings.json)"
    fi
else
    echo "  ✗ User settings not found"
fi

# Check project settings
if [[ -f .claude/settings.json ]]; then
    echo "  ✓ Project settings exists"
fi
if [[ -f .claude/settings.local.json ]]; then
    echo "  ✓ Project local settings exists"
fi

# Check CLAUDE.md
if [[ -f CLAUDE.md ]]; then
    echo "  ✓ CLAUDE.md exists ($(wc -l < CLAUDE.md) lines)"
fi

# Check Claude Desktop config
echo ""
echo "Claude Desktop:"
DESKTOP_CONFIG=""
if [[ -f "$HOME/Library/Application Support/Claude/claude_desktop_config.json" ]]; then
    DESKTOP_CONFIG="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    echo "  ✓ Config exists (macOS)"
elif [[ -f "$HOME/.config/claude/claude_desktop_config.json" ]]; then
    DESKTOP_CONFIG="$HOME/.config/claude/claude_desktop_config.json"
    echo "  ✓ Config exists (Linux)"
else
    echo "  ✗ Config not found"
fi

# Check MCP servers
echo ""
echo "MCP Servers:"
DOTFILES_DIR="$(cd "$(dirname "$0")/../.." && pwd)"
for server in tmux neovim playwright; do
    server_path="$DOTFILES_DIR/tools-ai/mcp-$server/server.js"
    echo -n "  $server: "
    if [[ -f "$server_path" ]]; then
        echo -n "✓"
        if [[ -d "$(dirname "$server_path")/node_modules" ]]; then
            echo " (dependencies installed)"
        else
            echo " (missing dependencies)"
        fi
    else
        echo "✗"
    fi
done

echo ""
echo "Use 'claude config list' to see current settings"
echo "Use 'claude config get <key>' to view specific settings"
EOF
    chmod +x "$CLAUDE_DIR/diagnose.sh"
    
    log_success "Scripts created"
}

# Create README documentation
create_documentation() {
    log_info "Creating documentation..."
    
    cat > "$CLAUDE_DIR/README.md" << 'EOF'
# Claude Code Configuration

This directory manages Claude Code (claude.ai/code) configuration according to the official documentation.

## Configuration Structure

According to the official docs, Claude Code uses these configuration files:

### User Settings
- `~/.claude/settings.json` - Global user settings (managed by this installer)

### Project Settings (not managed by dotfiles)
- `.claude/settings.json` - Team-shared project settings
- `.claude/settings.local.json` - Personal project settings
- `CLAUDE.md` - Project context and instructions
- `CLAUDE.local.md` - Personal project context

## What This Installer Does

1. **Installs MCP servers** - tmux, neovim, and playwright integration
2. **Configures user settings** - Creates ~/.claude/settings.json with:
   - MCP server configurations
   - Useful permissions
   - Environment variables
   - Feature flags
3. **Sets up Claude Desktop** - If desktop environment is detected
4. **Uses GNU Stow** - For proper configuration management

## Configuration Hierarchy

Settings are applied in this order (highest to lowest precedence):
1. Enterprise managed settings (if applicable)
2. Project settings (`.claude/settings.json`)
3. User settings (`~/.claude/settings.json`)
4. Project local settings (`.claude/settings.local.json`)

## Available Commands

After installation:
- `claude config list` - List all settings
- `claude config get <key>` - View a specific setting
- `claude config set <key> <value>` - Change a setting
- `./test-mcp.sh` - Test MCP server connectivity
- `./diagnose.sh` - Diagnose configuration

## MCP Servers

The following MCP servers are configured:
- **tmux** - Terminal multiplexer control
- **neovim** - Neovim editor integration
- **playwright** - Browser automation

## Customization

To add project-specific settings, create these files in your project root:
- `.claude/settings.json` - Shared settings
- `.claude/settings.local.json` - Personal settings (gitignored)
- `CLAUDE.md` - Project instructions

## Environment Variables

Key environment variables:
- `ANTHROPIC_API_KEY` - API authentication
- `CLAUDE_CODE_USE_BEDROCK` - Use Amazon Bedrock (default: false)
- `CLAUDE_CODE_USE_VERTEX` - Use Google Vertex AI (default: false)
EOF
    
    log_success "Documentation created"
}

# Main installation flow
main() {
    log_info "Starting Claude Code configuration..."
    
    # Install dependencies
    install_node
    
    # Install MCP servers
    install_mcp_servers
    
    # Setup configuration
    setup_stow_structure
    update_mcp_paths
    
    # Setup Claude Desktop if applicable
    setup_claude_desktop
    
    # Stow configurations
    stow_configs
    
    # Create helper scripts and docs
    create_scripts
    create_documentation
    
    log_success "Claude Code configuration complete!"
    echo ""
    log_info "Configuration locations:"
    echo "  User settings: ~/.claude/settings.json"
    has_desktop_environment && echo "  Desktop config: ~/.config/claude/claude_desktop_config.json (or ~/Library/... on macOS)"
    echo ""
    log_info "Next steps:"
    echo "  1. Test MCP servers: $CLAUDE_DIR/test-mcp.sh"
    echo "  2. Check configuration: $CLAUDE_DIR/diagnose.sh"
    echo "  3. View settings: claude config list"
    echo ""
    log_info "To customize for a project, create:"
    echo "  - CLAUDE.md in project root for instructions"
    echo "  - .claude/settings.json for project settings"
}

# Run main installation
main "$@"