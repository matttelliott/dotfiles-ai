#!/bin/bash

# Claude Code installation and configuration
# Configures Claude Code with MCP servers according to official documentation
# Part of dotfiles-ai repository

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../utils/common.sh"

detect_os

# Configuration
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
CLAUDE_DIR="$SCRIPT_DIR"

log_info "Configuring Claude Code with MCP servers..."

# Check if running in a desktop environment for Claude Desktop
has_desktop_environment() {
    if [[ -n "$DISPLAY" ]] || [[ -n "$WAYLAND_DISPLAY" ]] || [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
        return 0
    fi
    
    if [[ "$OS" == "macos" ]]; then
        return 0
    fi
    
    if command -v startx &>/dev/null || command -v gdm &>/dev/null || command -v lightdm &>/dev/null; then
        return 0
    fi
    
    return 1
}

# Install Node.js if needed (required for MCP servers)
install_node() {
    if command -v node &>/dev/null; then
        log_success "Node.js already installed: $(node --version)"
        return 0
    fi
    
    log_info "Installing Node.js via nvm..."
    if [[ -x "$DOTFILES_DIR/tools-lang/node/install" ]]; then
        "$DOTFILES_DIR/tools-lang/node/install"
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    else
        log_error "Cannot install Node.js. Please install manually."
        exit 1
    fi
}

# Install MCP server dependencies
install_mcp_server_deps() {
    local server_dir="$1"
    local server_name=$(basename "$server_dir")
    
    log_info "Installing dependencies for $server_name..."
    
    cd "$server_dir"
    
    # Install npm dependencies if package.json exists
    if [[ -f package.json ]]; then
        # Check if dependencies need to be installed
        if [[ ! -d node_modules ]] || [[ ! -f package-lock.json ]]; then
            log_info "Running npm install for $server_name..."
            npm install --production
        else
            log_info "Dependencies already installed for $server_name"
        fi
    fi
    
    # Make server executable
    if [[ -f server.js ]]; then
        chmod +x server.js
    fi
    
    # Make test script executable if it exists
    if [[ -f test-server.js ]]; then
        chmod +x test-server.js
    fi
}

# Install MCP servers
install_mcp_servers() {
    log_info "Installing MCP servers..."
    
    # Install tmux MCP server
    if [[ -d "$DOTFILES_DIR/tools-ai/mcp-tmux" ]]; then
        log_info "Installing mcp-tmux..."
        install_mcp_server_deps "$DOTFILES_DIR/tools-ai/mcp-tmux"
        
        # Check if tmux is installed
        if ! command -v tmux &>/dev/null; then
            log_warning "tmux not installed. Installing tmux..."
            if [[ "$OS" == "macos" ]]; then
                brew install tmux
            else
                sudo apt-get update && sudo apt-get install -y tmux
            fi
        fi
    fi
    
    # Install neovim MCP server
    if [[ -d "$DOTFILES_DIR/tools-ai/mcp-neovim" ]]; then
        log_info "Installing mcp-neovim..."
        install_mcp_server_deps "$DOTFILES_DIR/tools-ai/mcp-neovim"
        
        # Check if neovim is installed
        if ! command -v nvim &>/dev/null; then
            log_warning "Neovim not installed. You may want to install it for mcp-neovim to work."
            log_info "Install with: ./tools-cli/neovim/install"
        fi
    fi
    
    # Install playwright MCP server
    if [[ -d "$DOTFILES_DIR/tools-ai/mcp-playwright" ]]; then
        log_info "Installing mcp-playwright..."
        install_mcp_server_deps "$DOTFILES_DIR/tools-ai/mcp-playwright"
        
        # Install playwright browsers if needed
        cd "$DOTFILES_DIR/tools-ai/mcp-playwright"
        if [[ -f node_modules/.bin/playwright ]]; then
            log_info "Installing Playwright browsers..."
            npx playwright install chromium
        fi
    fi
    
    log_success "MCP servers installed"
}

# Create Claude settings.json with proper MCP configuration
create_settings_json() {
    log_info "Creating Claude Code settings.json..."
    
    # Ensure the .claude directory exists in the stow structure
    mkdir -p "$CLAUDE_DIR/.claude"
    
    # Create settings.json with MCP server configurations
    cat > "$CLAUDE_DIR/.claude/settings.json" << EOF
{
  "model": "claude-3-5-sonnet-20241022",
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(./install*)",
      "Bash(stow:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(claude mcp:*)"
    ],
    "deny": []
  },
  "env": {
    "DOTFILES_DIR": "$DOTFILES_DIR",
    "CLAUDE_CODE_USE_BEDROCK": "false",
    "CLAUDE_CODE_USE_VERTEX": "false"
  },
  "mcpServers": {
    "tmux": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-tmux/server.js"],
      "env": {
        "NODE_ENV": "production"
      }
    },
    "neovim": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-neovim/server.js"],
      "env": {
        "NODE_ENV": "production",
        "NVIM_LISTEN_ADDRESS": "/tmp/nvim.pipe"
      }
    },
    "playwright": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-playwright/server.js"],
      "env": {
        "NODE_ENV": "production",
        "PLAYWRIGHT_BROWSERS_PATH": "$HOME/.cache/ms-playwright"
      }
    }
  },
  "features": {
    "autoSave": true,
    "confirmBeforeRun": false,
    "syntaxHighlighting": true,
    "notificationStyle": "minimal"
  }
}
EOF
    
    log_success "Settings.json created"
}

# Setup Claude Desktop config if desktop environment exists
setup_claude_desktop() {
    if ! has_desktop_environment; then
        log_info "No desktop environment detected, skipping Claude Desktop config"
        return 0
    fi
    
    log_info "Setting up Claude Desktop configuration..."
    
    # Determine Claude Desktop config location based on OS
    local desktop_config_dir
    case "$OS" in
        macos)
            desktop_config_dir="$HOME/Library/Application Support/Claude"
            ;;
        *)
            desktop_config_dir="$HOME/.config/claude"
            ;;
    esac
    
    # Create directory if it doesn't exist
    mkdir -p "$desktop_config_dir"
    
    # Check if jq is installed
    if ! command -v jq &>/dev/null; then
        log_warning "jq not installed, installing..."
        if [[ "$OS" == "macos" ]]; then
            brew install jq
        else
            sudo apt-get update && sudo apt-get install -y jq
        fi
    fi
    
    # Extract just the mcpServers section from our settings.json
    local mcp_config=$(jq '.mcpServers' "$CLAUDE_DIR/.claude/settings.json")
    
    # Create Claude Desktop config
    cat > "$desktop_config_dir/claude_desktop_config.json" << EOF
{
  "mcpServers": $mcp_config,
  "theme": "auto",
  "telemetry": false,
  "autoUpdate": true
}
EOF
    
    log_success "Claude Desktop configured at $desktop_config_dir/claude_desktop_config.json"
}

# Use GNU Stow to symlink configs
stow_configs() {
    log_info "Stowing Claude Code configuration..."
    
    # Ensure GNU Stow is installed
    if ! command -v stow &>/dev/null; then
        log_warning "GNU Stow not installed. Installing..."
        if [[ "$OS" == "macos" ]]; then
            brew install stow
        else
            sudo apt-get update && sudo apt-get install -y stow
        fi
    fi
    
    # Navigate to tools-ai directory for stowing
    cd "$DOTFILES_DIR/tools-ai"
    
    # Remove any existing symlinks that might conflict
    if [[ -L "$HOME/.claude/settings.json" ]]; then
        rm "$HOME/.claude/settings.json"
    fi
    
    # Backup existing settings if they exist and aren't symlinks
    if [[ -f "$HOME/.claude/settings.json" && ! -L "$HOME/.claude/settings.json" ]]; then
        log_info "Backing up existing settings.json..."
        mv "$HOME/.claude/settings.json" "$HOME/.claude/settings.json.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Create .claude directory if it doesn't exist
    mkdir -p "$HOME/.claude"
    
    # Stow the Claude configs
    stow -v -R -t "$HOME" claude
    
    log_success "Configuration files stowed"
}

# Test MCP servers
test_mcp_servers() {
    log_info "Testing MCP servers..."
    
    local all_passed=true
    
    # Test tmux server
    if [[ -x "$DOTFILES_DIR/tools-ai/mcp-tmux/server.js" ]]; then
        log_info "Testing mcp-tmux..."
        if timeout 2 node "$DOTFILES_DIR/tools-ai/mcp-tmux/server.js" --test 2>&1 | grep -q "MCP"; then
            log_success "mcp-tmux is functional"
        else
            log_warning "mcp-tmux may need additional configuration"
            all_passed=false
        fi
    fi
    
    # Test neovim server
    if [[ -x "$DOTFILES_DIR/tools-ai/mcp-neovim/server.js" ]]; then
        log_info "Testing mcp-neovim..."
        if timeout 2 node "$DOTFILES_DIR/tools-ai/mcp-neovim/server.js" --info 2>&1 | grep -q "MCP"; then
            log_success "mcp-neovim is functional"
        else
            log_warning "mcp-neovim may need additional configuration"
            all_passed=false
        fi
    fi
    
    # Test playwright server
    if [[ -x "$DOTFILES_DIR/tools-ai/mcp-playwright/server.js" ]]; then
        log_info "Testing mcp-playwright..."
        if [[ -d "$DOTFILES_DIR/tools-ai/mcp-playwright/node_modules" ]]; then
            log_success "mcp-playwright dependencies installed"
        else
            log_warning "mcp-playwright missing dependencies"
            all_passed=false
        fi
    fi
    
    if [[ "$all_passed" == "true" ]]; then
        log_success "All MCP servers are ready!"
    else
        log_warning "Some MCP servers may need additional setup"
    fi
}

# Create diagnostic script
create_diagnostic_script() {
    log_info "Creating diagnostic script..."
    
    cat > "$CLAUDE_DIR/diagnose.sh" << 'EOF'
#!/bin/bash

echo "Claude Code Configuration Diagnostic"
echo "===================================="
echo ""

DOTFILES_DIR="$(cd "$(dirname "$0")/../.." && pwd)"

# Check Node.js
echo "Node.js:"
if command -v node &>/dev/null; then
    echo "  ✓ $(node --version)"
else
    echo "  ✗ Not installed"
fi

# Check Claude Code settings
echo ""
echo "Claude Code Settings:"
if [[ -f ~/.claude/settings.json ]]; then
    echo "  ✓ User settings exists"
    if [[ -L ~/.claude/settings.json ]]; then
        echo "    Symlinked to: $(readlink ~/.claude/settings.json)"
    fi
    
    # Check if MCP servers are configured
    if command -v jq &>/dev/null; then
        echo "  MCP servers configured:"
        jq -r '.mcpServers | keys[]' ~/.claude/settings.json 2>/dev/null | sed 's/^/    - /'
    fi
else
    echo "  ✗ User settings not found"
fi

# Check authentication
if [[ -f ~/.claude/.credentials.json ]]; then
    echo "  ✓ Authentication credentials exist"
else
    echo "  ℹ No authentication credentials found (run 'claude login' to authenticate)"
fi

# Check MCP servers
echo ""
echo "MCP Server Status:"
for server in tmux neovim playwright; do
    server_path="$DOTFILES_DIR/tools-ai/mcp-$server/server.js"
    echo -n "  $server: "
    if [[ -f "$server_path" ]]; then
        echo -n "✓ installed"
        if [[ -d "$(dirname "$server_path")/node_modules" ]]; then
            echo " (dependencies ✓)"
        else
            echo " (missing dependencies)"
        fi
    else
        echo "✗ not found"
    fi
done

# Check required tools
echo ""
echo "Required Tools:"
echo -n "  tmux: "
command -v tmux &>/dev/null && echo "✓ $(tmux -V)" || echo "✗ not installed"
echo -n "  neovim: "
command -v nvim &>/dev/null && echo "✓ $(nvim --version | head -1)" || echo "✗ not installed"

# Check Claude Desktop config
echo ""
echo "Claude Desktop:"
DESKTOP_CONFIG=""
if [[ -f "$HOME/Library/Application Support/Claude/claude_desktop_config.json" ]]; then
    DESKTOP_CONFIG="$HOME/Library/Application Support/Claude/claude_desktop_config.json"
    echo "  ✓ Config exists (macOS)"
elif [[ -f "$HOME/.config/claude/claude_desktop_config.json" ]]; then
    DESKTOP_CONFIG="$HOME/.config/claude/claude_desktop_config.json"
    echo "  ✓ Config exists (Linux)"
else
    echo "  ℹ Config not found (desktop environment may not be available)"
fi

echo ""
echo "Quick Test Commands:"
echo "  Test MCP servers: claude mcp list"
echo "  View settings: claude config list"
echo "  Login to Claude: claude login"
EOF
    
    chmod +x "$CLAUDE_DIR/diagnose.sh"
    
    log_success "Diagnostic script created"
}

# Main installation flow
main() {
    log_info "Starting Claude Code configuration..."
    
    # Install dependencies
    install_node
    
    # Install and configure MCP servers
    install_mcp_servers
    
    # Create configuration files
    create_settings_json
    
    # Setup Claude Desktop if applicable
    setup_claude_desktop
    
    # Stow configurations
    stow_configs
    
    # Test MCP servers
    test_mcp_servers
    
    # Create diagnostic script
    create_diagnostic_script
    
    log_success "Claude Code configuration complete!"
    echo ""
    log_info "Configuration Status:"
    echo "  ✓ User settings: ~/.claude/settings.json"
    echo "  ✓ MCP servers installed and configured"
    has_desktop_environment && echo "  ✓ Desktop config: ~/.config/claude/claude_desktop_config.json (or ~/Library/... on macOS)"
    echo ""
    log_info "Next steps:"
    echo "  1. Authenticate Claude Code: claude login"
    echo "  2. Test MCP servers: claude mcp list"
    echo "  3. Run diagnostics: $CLAUDE_DIR/diagnose.sh"
    echo ""
    log_info "MCP Servers Available:"
    echo "  - tmux: Terminal multiplexer control"
    echo "  - neovim: Neovim editor integration"
    echo "  - playwright: Browser automation"
    echo ""
    log_success "Installation complete! Claude Code is ready to use with MCP servers."
}

# Run main installation
main "$@"