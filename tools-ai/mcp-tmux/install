#!/usr/bin/env bash

# Tmux MCP Server Installation Script
# Part of dotfiles-ai repository

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../utils/common.sh"

detect_os

# Get the absolute path of the dotfiles directory
DOTFILES_DIR="$(cd "$(dirname "$0")/../.." && pwd)"
MCP_SERVER_DIR="${SCRIPT_DIR}"

log_info "Installing Tmux MCP Server for Claude CLI integration..."

# Check for dependencies
check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check if tmux is installed
    if ! command -v tmux >/dev/null 2>&1; then
        log_error "tmux is not installed. Please install tmux first:"
        log_error "  macOS: brew install tmux"
        log_error "  Ubuntu/Debian: sudo apt install tmux"
        exit 1
    fi
    
    # Check if Node.js is installed
    if ! command -v node >/dev/null 2>&1; then
        log_error "Node.js is not installed. Please install Node.js first:"
        log_error "  Visit https://nodejs.org/ or use your package manager"
        log_error "  Or install via dotfiles-ai: ./tools-lang/node/install"
        exit 1
    fi
    
    # Check Node.js version (requires >= 14)
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [[ $NODE_VERSION -lt 14 ]]; then
        log_error "Node.js version 14 or higher required. Current version: $(node --version)"
        exit 1
    fi
    
    log_success "All dependencies satisfied"
}

# Make the server executable
setup_server() {
    log_info "Setting up MCP server..."
    
    # Make server script executable
    chmod +x "${MCP_SERVER_DIR}/server.js"
    
    # Install Node.js dependencies
    cd "${MCP_SERVER_DIR}"
    if [[ -f package.json ]]; then
        log_info "Installing Node.js dependencies..."
        if npm install --production; then
            log_success "Dependencies installed successfully"
        else
            log_error "Failed to install npm dependencies"
            exit 1
        fi
    else
        log_warning "No package.json found, skipping dependency installation"
    fi
    
    log_success "MCP server setup complete"
}

# Setup stow-compatible structure
setup_stow_structure() {
    log_info "Setting up stow-compatible structure..."
    
    # This installer focuses only on the MCP server itself
    # Claude Desktop/CLI configs are handled by their respective installers
    
    log_success "MCP server structure ready"
}

# Create convenience scripts
create_scripts() {
    log_info "Creating convenience scripts..."
    
    # Create a test script
    cat > "${MCP_SERVER_DIR}/test-server.js" << 'EOF'
#!/usr/bin/env node

/**
 * Test script for Tmux MCP Server
 * Tests basic functionality of the MCP server
 */

const TmuxMCPServer = require('./server.js');

async function runTests() {
    console.log('Testing Tmux MCP Server...\n');
    
    const server = new TmuxMCPServer();
    
    try {
        // Test 1: List sessions
        console.log('Test 1: Listing tmux sessions...');
        const sessions = await server.listSessions(true);
        console.log('Sessions:', JSON.stringify(sessions, null, 2));
        console.log('✓ List sessions test passed\n');
        
        // Test 2: Check if we can run tmux commands
        console.log('Test 2: Testing tmux command execution...');
        try {
            await server.execTmux('list-sessions');
            console.log('✓ Tmux command execution test passed\n');
        } catch (error) {
            if (error.message.includes('no server running')) {
                console.log('ℹ No tmux server running (expected for clean environment)');
                console.log('✓ Tmux command execution test passed\n');
            } else {
                throw error;
            }
        }
        
        // Test 3: Create a test session (if no sessions exist)
        if (sessions.sessions.length === 0) {
            console.log('Test 3: Creating test session...');
            const result = await server.createSession('mcp-test', null, null, true);
            console.log('Create session result:', JSON.stringify(result, null, 2));
            console.log('✓ Create session test passed\n');
            
            // Test 4: Read from the test session
            console.log('Test 4: Reading from test session...');
            try {
                const content = await server.readPane('mcp-test', '0', '0', 10);
                console.log('Pane content:', JSON.stringify(content, null, 2));
                console.log('✓ Read pane test passed\n');
            } catch (error) {
                console.log('ℹ Read pane test skipped (pane might not be ready yet)');
            }
            
            // Clean up test session
            console.log('Cleaning up test session...');
            await server.killSession('mcp-test');
            console.log('✓ Cleanup completed\n');
        }
        
        console.log('🎉 All tests passed! Tmux MCP Server is working correctly.');
        
    } catch (error) {
        console.error('❌ Test failed:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    runTests();
}
EOF
    
    chmod +x "${MCP_SERVER_DIR}/test-server.js"
    
    # Create a start script
    cat > "${MCP_SERVER_DIR}/start.sh" << EOF
#!/usr/bin/env bash

# Start the Tmux MCP Server
cd "${MCP_SERVER_DIR}"
exec node server.js
EOF
    
    chmod +x "${MCP_SERVER_DIR}/start.sh"
    
    log_success "Convenience scripts created"
}

# Add convenience aliases
setup_aliases() {
    log_info "Creating convenience aliases..."
    
    # Create aliases file for manual sourcing
    cat > "${MCP_SERVER_DIR}/aliases.sh" << EOF
# Tmux MCP Server aliases
alias tmux-mcp-start="${MCP_SERVER_DIR}/start.sh"
alias tmux-mcp-test="${MCP_SERVER_DIR}/test-server.js"

# Enhanced tmux aliases
alias tmux-sessions="tmux list-sessions -F '#{session_name}: #{session_windows} windows, created #{session_created_string}'"
alias tmux-panes="tmux list-panes -a -F '#{session_name}:#{window_index}.#{pane_index} - #{pane_current_command} (#{pane_width}x#{pane_height})'"
EOF
    
    log_success "Aliases created (source ${MCP_SERVER_DIR}/aliases.sh to use)"
}

# Run installation steps
main() {
    log_info "Starting Tmux MCP Server installation..."
    
    check_dependencies
    setup_server
    setup_stow_structure
    create_scripts
    setup_aliases
    
    log_success "Tmux MCP Server installation complete!"
    echo ""
    log_info "Server installed at: ${MCP_SERVER_DIR}/server.js"
    echo ""
    log_info "To use with Claude:"
    echo "  1. Run the Claude Desktop installer: $DOTFILES_DIR/tools-ai/claude-desktop/install"
    echo "  2. Run the Claude CLI installer: $DOTFILES_DIR/tools-ai/claude-cli/install"
    echo ""
    log_info "Testing:"
    echo "  Test server: ${MCP_SERVER_DIR}/test-server.js"
    echo ""
    log_info "Aliases available:"
    echo "  source ${MCP_SERVER_DIR}/aliases.sh"
}

# Run main installation
main "$@"
