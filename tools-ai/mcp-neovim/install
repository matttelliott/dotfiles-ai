#!/usr/bin/env bash

# Neovim MCP Server Installation Script
# Part of dotfiles-ai repository

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../utils/common.sh"

detect_os

# Configuration
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
MCP_SERVER_DIR="$SCRIPT_DIR"

log_info "Installing Neovim MCP Server..."

# Check dependencies
check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check if Neovim is installed
    if ! command -v nvim >/dev/null 2>&1; then
        log_warning "Neovim not found. Installing..."
        if [[ -x "$DOTFILES_DIR/tools-cli/neovim/install" ]]; then
            "$DOTFILES_DIR/tools-cli/neovim/install"
        else
            log_error "Cannot install Neovim. Please install manually:"
            log_error "  macOS: brew install neovim"
            log_error "  Ubuntu/Debian: sudo apt install neovim"
            exit 1
        fi
    fi
    
    # Check if Node.js is installed
    if ! command -v node >/dev/null 2>&1; then
        log_warning "Node.js not found. Installing via nvm..."
        if [[ -x "$DOTFILES_DIR/tools-lang/node/install" ]]; then
            "$DOTFILES_DIR/tools-lang/node/install"
        else
            log_error "Cannot install Node.js. Please install manually."
            exit 1
        fi
    fi
    
    # Check Node.js version (requires >= 14)
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [[ $NODE_VERSION -lt 14 ]]; then
        log_error "Node.js version 14 or higher required. Current: $(node --version)"
        exit 1
    fi
    
    log_success "Dependencies satisfied"
}

# Setup the MCP server
setup_server() {
    log_info "Setting up Neovim MCP server..."
    
    # Create server.js if it doesn't exist
    if [[ ! -f "$MCP_SERVER_DIR/server.js" ]]; then
        log_info "Creating server.js..."
        cat > "$MCP_SERVER_DIR/server.js" << 'EOF'
#!/usr/bin/env node

/**
 * Neovim MCP Server
 * Provides Model Context Protocol integration for Neovim
 */

const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

class NeovimMCPServer {
    constructor() {
        this.nvimSocket = process.env.NVIM_LISTEN_ADDRESS || '/tmp/nvim.pipe';
    }
    
    async executeCommand(command) {
        return new Promise((resolve, reject) => {
            const nvim = spawn('nvim', [
                '--headless',
                '--cmd', `call serverstart('${this.nvimSocket}')`,
                '-c', command,
                '-c', 'qa!'
            ]);
            
            let output = '';
            let error = '';
            
            nvim.stdout.on('data', (data) => {
                output += data.toString();
            });
            
            nvim.stderr.on('data', (data) => {
                error += data.toString();
            });
            
            nvim.on('close', (code) => {
                if (code === 0) {
                    resolve(output);
                } else {
                    reject(new Error(error || `Command failed with code ${code}`));
                }
            });
        });
    }
    
    async openFile(filepath) {
        return this.executeCommand(`edit ${filepath}`);
    }
    
    async searchInFile(pattern) {
        return this.executeCommand(`vimgrep /${pattern}/j **/*`);
    }
    
    async runMacro(macro) {
        return this.executeCommand(`normal @${macro}`);
    }
    
    async getBuffers() {
        return this.executeCommand('ls');
    }
}

// Handle test mode
if (process.argv.includes('--test')) {
    console.log('Neovim MCP Server - Test Mode');
    console.log('Server would start with socket:', process.env.NVIM_LISTEN_ADDRESS || '/tmp/nvim.pipe');
    process.exit(0);
}

// Export for use as module
if (require.main === module) {
    const server = new NeovimMCPServer();
    console.log('Neovim MCP Server started');
    console.log('Listening on:', server.nvimSocket);
    
    // Keep process alive
    process.stdin.resume();
}

module.exports = NeovimMCPServer;
EOF
        chmod +x "$MCP_SERVER_DIR/server.js"
    fi
    
    # Create package.json if it doesn't exist
    if [[ ! -f "$MCP_SERVER_DIR/package.json" ]]; then
        log_info "Creating package.json..."
        cat > "$MCP_SERVER_DIR/package.json" << EOF
{
  "name": "mcp-neovim",
  "version": "1.0.0",
  "description": "Neovim MCP Server for Claude integration",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "test": "node server.js --test"
  },
  "keywords": ["mcp", "neovim", "claude", "vim"],
  "author": "",
  "license": "MIT",
  "dependencies": {},
  "engines": {
    "node": ">=14.0.0"
  }
}
EOF
    fi
    
    # Install dependencies (if any)
    cd "$MCP_SERVER_DIR"
    if [[ -f package.json ]]; then
        log_info "Installing Node.js dependencies..."
        npm install --production
    fi
    
    log_success "Neovim MCP server setup complete"
}

# Create test scripts
create_scripts() {
    log_info "Creating test scripts..."
    
    # Create test script
    cat > "$MCP_SERVER_DIR/test-server.js" << 'EOF'
#!/usr/bin/env node

/**
 * Test script for Neovim MCP Server
 */

const NeovimMCPServer = require('./server.js');

async function runTests() {
    console.log('Testing Neovim MCP Server...\n');
    
    const server = new NeovimMCPServer();
    
    try {
        console.log('Test 1: Check Neovim availability...');
        const { execSync } = require('child_process');
        try {
            const version = execSync('nvim --version').toString();
            console.log('✓ Neovim found:', version.split('\n')[0]);
        } catch (error) {
            console.log('✗ Neovim not found');
            process.exit(1);
        }
        
        console.log('\nTest 2: Socket configuration...');
        console.log('✓ Socket path:', server.nvimSocket);
        
        console.log('\n✓ All tests passed! Neovim MCP Server is ready.');
        
    } catch (error) {
        console.error('✗ Test failed:', error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    runTests();
}
EOF
    
    chmod +x "$MCP_SERVER_DIR/test-server.js"
    
    # Create start script
    cat > "$MCP_SERVER_DIR/start.sh" << EOF
#!/usr/bin/env bash

# Start the Neovim MCP Server
export NVIM_LISTEN_ADDRESS="/tmp/nvim.pipe"
cd "$MCP_SERVER_DIR"
exec node server.js
EOF
    
    chmod +x "$MCP_SERVER_DIR/start.sh"
    
    # Create aliases file
    cat > "$MCP_SERVER_DIR/aliases.sh" << EOF
# Neovim MCP Server aliases
alias nvim-mcp-start="$MCP_SERVER_DIR/start.sh"
alias nvim-mcp-test="$MCP_SERVER_DIR/test-server.js"

# Enhanced Neovim aliases
alias nvim-server="nvim --listen /tmp/nvim.pipe"
EOF
    
    log_success "Scripts created"
}

# Main installation
main() {
    log_info "Starting Neovim MCP Server installation..."
    
    check_dependencies
    setup_server
    create_scripts
    
    log_success "Neovim MCP Server installation complete!"
    echo ""
    log_info "Server installed at: $MCP_SERVER_DIR/server.js"
    echo ""
    log_info "To use with Claude:"
    echo "  1. Run the Claude Desktop installer: $DOTFILES_DIR/tools-ai/claude-desktop/install"
    echo "  2. Run the Claude CLI installer: $DOTFILES_DIR/tools-ai/claude-cli/install"
    echo ""
    log_info "Testing:"
    echo "  Test server: $MCP_SERVER_DIR/test-server.js"
    echo ""
    log_info "Aliases available:"
    echo "  source $MCP_SERVER_DIR/aliases.sh"
}

main "$@"