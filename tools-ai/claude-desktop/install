#!/usr/bin/env bash

# Claude Desktop Configuration with MCP Server Integration
# Part of dotfiles-ai repository

set -e

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../utils/common.sh"

detect_os

# Configuration
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"
CLAUDE_DESKTOP_DIR="$SCRIPT_DIR"

log_info "Configuring Claude Desktop with MCP server integration..."

# Determine Claude Desktop config location based on OS
get_claude_desktop_config_dir() {
    case "$OS" in
        macos)
            echo "$HOME/Library/Application Support/Claude"
            ;;
        debian|mint|linux)
            echo "$HOME/.config/claude"
            ;;
        *)
            log_error "Unsupported OS for Claude Desktop: $OS"
            exit 1
            ;;
    esac
}

# Check dependencies
check_dependencies() {
    log_info "Checking dependencies..."
    
    # Check if Node.js is installed (required for MCP servers)
    if ! command -v node >/dev/null 2>&1; then
        log_warning "Node.js not found. Installing via nvm..."
        if [[ -x "$DOTFILES_DIR/tools-lang/node/install" ]]; then
            "$DOTFILES_DIR/tools-lang/node/install"
        else
            log_error "Cannot install Node.js. Please install manually."
            exit 1
        fi
    fi
    
    # Check Node.js version (requires >= 14)
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [[ $NODE_VERSION -lt 14 ]]; then
        log_error "Node.js version 14 or higher required. Current: $(node --version)"
        exit 1
    fi
    
    log_success "Dependencies satisfied"
}

# Get Claude Desktop config directory
get_config_dir() {
    case "$OS" in
        macos)
            echo "$HOME/Library/Application Support/Claude"
            ;;
        *)
            echo "$HOME/.config/claude"
            ;;
    esac
}

# Create Claude Desktop configuration with all MCP servers
create_desktop_config() {
    log_info "Creating Claude Desktop configuration..."
    
    local config_dir=$(get_config_dir)
    local config_file="$config_dir/claude_desktop_config.json"
    
    # Create config directory if it doesn't exist
    mkdir -p "$config_dir"
    
    # Backup existing config if it exists and is not our managed version
    if [[ -f "$config_file" ]] && ! grep -q "dotfiles-ai/tools-ai" "$config_file" 2>/dev/null; then
        log_info "Backing up existing configuration..."
        cp "$config_file" "$config_file.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Create the configuration with all MCP servers
    cat > "$config_file" << EOF
{
  "mcpServers": {
    "tmux": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-tmux/server.js"],
      "env": {
        "NODE_ENV": "production"
      }
    },
    "neovim": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-neovim/server.js"],
      "env": {
        "NODE_ENV": "production",
        "NVIM_LISTEN_ADDRESS": "/tmp/nvim.pipe"
      }
    },
    "playwright": {
      "command": "node",
      "args": ["$DOTFILES_DIR/tools-ai/mcp-playwright/server.js"],
      "env": {
        "NODE_ENV": "production",
        "PLAYWRIGHT_BROWSERS_PATH": "$HOME/.cache/ms-playwright"
      }
    }
  },
  "theme": "auto",
  "telemetry": false,
  "autoUpdate": true
}
EOF
    
    log_success "Claude Desktop configuration created"
}

# Install all MCP servers if not already installed
install_mcp_servers() {
    log_info "Installing MCP servers..."
    
    local servers=("mcp-tmux" "mcp-neovim" "mcp-playwright")
    
    for server in "${servers[@]}"; do
        local server_dir="$DOTFILES_DIR/tools-ai/$server"
        
        # Check if server is already installed (has node_modules)
        if [[ -d "$server_dir/node_modules" ]]; then
            log_success "$server already installed"
        elif [[ -x "$server_dir/install" ]]; then
            log_info "Installing $server..."
            "$server_dir/install"
        else
            log_warning "$server installer not found, skipping..."
        fi
    done
    
    log_success "MCP servers ready"
}

# Write configuration directly (no stow needed for single config file)
write_config() {
    local config_dir=$(get_config_dir)
    local config_file="$config_dir/claude_desktop_config.json"
    
    log_success "Claude Desktop configuration written to $config_file"
}

# Create test and diagnostic scripts
create_scripts() {
    log_info "Creating diagnostic scripts..."
    
    # Create diagnostic script
    cat > "$CLAUDE_DESKTOP_DIR/diagnose.sh" << 'EOF'
#!/usr/bin/env bash

echo "Claude Desktop MCP Configuration Diagnostic"
echo "==========================================="
echo ""

# Check config file
CONFIG_DIR=""
if [[ "$OSTYPE" == "darwin"* ]]; then
    CONFIG_DIR="$HOME/Library/Application Support/Claude"
else
    CONFIG_DIR="$HOME/.config/claude"
fi

CONFIG_FILE="$CONFIG_DIR/claude_desktop_config.json"

echo "Configuration location: $CONFIG_FILE"
if [[ -f "$CONFIG_FILE" ]]; then
    echo "✓ Configuration file exists"
    if [[ -L "$CONFIG_FILE" ]]; then
        echo "✓ Configuration is symlinked (managed by stow)"
        echo "  Points to: $(readlink "$CONFIG_FILE")"
    else
        echo "ℹ Configuration is a regular file (not managed by stow)"
    fi
else
    echo "✗ Configuration file not found"
fi

echo ""
echo "MCP Servers Status:"
echo "-------------------"

# Check each MCP server
for server in tmux neovim playwright; do
    SERVER_PATH="$DOTFILES_DIR/tools-ai/mcp-$server/server.js"
    echo -n "$server: "
    
    if [[ -f "$SERVER_PATH" ]]; then
        echo -n "✓ Server exists"
        
        # Check if node_modules exist
        if [[ -d "$(dirname "$SERVER_PATH")/node_modules" ]]; then
            echo " ✓ Dependencies installed"
        else
            echo " ✗ Dependencies not installed"
        fi
    else
        echo "✗ Server not found at $SERVER_PATH"
    fi
done

echo ""
echo "Node.js Status:"
echo "---------------"
if command -v node >/dev/null 2>&1; then
    echo "✓ Node.js installed: $(node --version)"
else
    echo "✗ Node.js not found"
fi

if command -v npm >/dev/null 2>&1; then
    echo "✓ npm installed: $(npm --version)"
else
    echo "✗ npm not found"
fi

echo ""
echo "Current Configuration:"
echo "----------------------"
if [[ -f "$CONFIG_FILE" ]]; then
    echo "Content of $CONFIG_FILE:"
    cat "$CONFIG_FILE" | python3 -m json.tool 2>/dev/null || cat "$CONFIG_FILE"
fi
EOF
    
    chmod +x "$CLAUDE_DESKTOP_DIR/diagnose.sh"
    
    # Create server test script
    cat > "$CLAUDE_DESKTOP_DIR/test-servers.sh" << 'EOF'
#!/usr/bin/env bash

echo "Testing MCP Servers for Claude Desktop"
echo "======================================="
echo ""

DOTFILES_DIR="$(cd "$(dirname "$0")/../.." && pwd)"

# Test each server
for server in tmux neovim playwright; do
    echo "Testing mcp-$server..."
    SERVER_DIR="$DOTFILES_DIR/tools-ai/mcp-$server"
    
    if [[ -f "$SERVER_DIR/test-server.js" ]]; then
        node "$SERVER_DIR/test-server.js" 2>&1 | head -20
    elif [[ -f "$SERVER_DIR/server.js" ]]; then
        # Try to run with --test flag
        timeout 2 node "$SERVER_DIR/server.js" --test 2>&1 || echo "  Server started (timeout expected)"
    else
        echo "  ✗ Server not found"
    fi
    echo ""
done
EOF
    
    chmod +x "$CLAUDE_DESKTOP_DIR/test-servers.sh"
    
    log_success "Scripts created"
}

# Main installation
main() {
    log_info "Starting Claude Desktop configuration..."
    
    check_dependencies
    create_desktop_config
    write_config
    install_mcp_servers
    create_scripts
    
    local config_dir=$(get_config_dir)
    
    log_success "Claude Desktop configuration complete!"
    echo ""
    log_info "Configuration created at:"
    echo "  $config_dir/claude_desktop_config.json"
    echo ""
    log_info "MCP Servers configured:"
    echo "  - tmux: Terminal multiplexer control"
    echo "  - neovim: Neovim editor integration"
    echo "  - playwright: Browser automation"
    echo ""
    log_info "Diagnostic tools:"
    echo "  Diagnose: $CLAUDE_DESKTOP_DIR/diagnose.sh"
    echo "  Test servers: $CLAUDE_DESKTOP_DIR/test-servers.sh"
    echo ""
    log_info "Next steps:"
    echo "  1. Restart Claude Desktop application"
    echo "  2. MCP servers will be available in your conversations"
    echo "  3. Run diagnostics if you encounter issues"
}

main "$@"