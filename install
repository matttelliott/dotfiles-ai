#!/bin/bash
# Unified installer for dotfiles-ai
# Usage: ./install [target] [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STOW_DIR="$DOTFILES_DIR"
TARGET_DIR="$HOME"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect OS
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case $ID in
            debian|ubuntu|linuxmint)
                OS="debian"
                ;;
            fedora|rhel|centos)
                OS="fedora"
                ;;
            arch|manjaro)
                OS="arch"
                ;;
            *)
                OS="linux"
                ;;
        esac
    else
        OS="unknown"
    fi
    export OS
}

# Install Stow first
install_stow() {
    if command -v stow &> /dev/null; then
        log_success "GNU Stow is already installed"
        return 0
    fi
    
    log_info "Installing GNU Stow..."
    case "$OS" in
        macos)
            brew install stow
            ;;
        debian)
            if [[ -t 0 ]]; then
                sudo apt-get update && sudo apt-get install -y stow
            else
                log_warning "Non-interactive mode: Please install GNU Stow manually"
                return 1
            fi
            ;;
        fedora)
            if [[ -t 0 ]]; then
                sudo dnf install -y stow
            else
                log_warning "Non-interactive mode: Please install GNU Stow manually"
                return 1
            fi
            ;;
        arch)
            if [[ -t 0 ]]; then
                sudo pacman -S --noconfirm stow
            else
                log_warning "Non-interactive mode: Please install GNU Stow manually"
                return 1
            fi
            ;;
        *)
            log_error "Please install GNU Stow manually for your OS"
            exit 1
            ;;
    esac
    log_success "GNU Stow installed"
}

# Install base system requirements
install_base() {
    log_info "Installing base system packages..."
    
    if [[ -x "$DOTFILES_DIR/system/$OS/install" ]]; then
        "$DOTFILES_DIR/system/$OS/install"
    elif [[ -x "$DOTFILES_DIR/system/$OS/setup.sh" ]]; then
        # Fallback to old setup.sh if it exists
        "$DOTFILES_DIR/system/$OS/setup.sh"
    else
        log_warning "No base setup found for $OS"
    fi
}

# Install a single tool
install_tool() {
    local tool_path="$1"
    local tool_name="$(basename "$tool_path")"
    
    log_info "Installing $tool_name..."
    
    # Run the tool's install script if it exists
    if [[ -x "$tool_path/install" ]]; then
        (cd "$tool_path" && ./install)
    elif [[ -x "$tool_path/setup.sh" ]]; then
        # Fallback to old setup.sh
        (cd "$tool_path" && ./setup.sh)
    else
        log_warning "No installer found for $tool_name"
    fi
    
    # Use stow for any config files
    if [[ -d "$tool_path/.config" ]] || [[ -f "$tool_path/.zshrc" ]] || [[ -f "$tool_path/.bashrc" ]]; then
        log_info "Stowing $tool_name configs..."
        (cd "$STOW_DIR" && stow -t "$TARGET_DIR" -R "$tool_path")
        log_success "$tool_name configs linked"
    fi
}

# Install all tools in a category
install_category() {
    local category="$1"
    local category_path="$DOTFILES_DIR/$category"
    
    if [[ ! -d "$category_path" ]]; then
        log_error "Category $category not found"
        return 1
    fi
    
    log_info "Installing all $category..."
    
    # Priority tools to install first (if they exist)
    local priority_tools=("stow" "zsh" "tmux" "neovim")
    
    for tool in "${priority_tools[@]}"; do
        if [[ -d "$category_path/$tool" ]]; then
            install_tool "$category_path/$tool"
        fi
    done
    
    # Install remaining tools
    for tool_path in "$category_path"/*; do
        [[ -d "$tool_path" ]] || continue
        local tool_name="$(basename "$tool_path")"
        
        # Skip if already installed in priority
        if [[ " ${priority_tools[@]} " =~ " ${tool_name} " ]]; then
            continue
        fi
        
        install_tool "$tool_path"
    done
}

# Show usage
show_usage() {
    cat << EOF
Usage: ./install [target] [options]

Targets:
    (none)          Install everything
    all             Install everything
    cli             Install CLI tools only
    gui             Install GUI applications only
    lang            Install programming languages only
    <tool>          Install specific tool (e.g., neovim, docker)

Options:
    -h, --help      Show this help message
    -v, --verbose   Verbose output
    --no-base       Skip base system packages

Examples:
    ./install                    # Install everything
    ./install cli                # Install all CLI tools
    ./install neovim             # Install just Neovim
    ./install neovim zsh tmux    # Install multiple tools

EOF
}

# Main installation logic
main() {
    cd "$DOTFILES_DIR"
    
    # Parse arguments
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi
    
    detect_os
    log_info "Detected OS: $OS"
    
    # Always install stow first
    install_stow
    
    # Determine what to install
    if [[ $# -eq 0 ]] || [[ "$1" == "all" ]]; then
        # Install everything
        log_info "Installing complete dotfiles environment..."
        install_base
        install_category "tools-cli"
        install_category "tools-lang"
        install_category "tools-gui"
        
    elif [[ "$1" == "cli" ]]; then
        # CLI tools only
        install_base
        install_category "tools-cli"
        
    elif [[ "$1" == "gui" ]]; then
        # GUI tools only
        install_category "tools-gui"
        
    elif [[ "$1" == "lang" ]]; then
        # Programming languages only
        install_category "tools-lang"
        
    else
        # Install specific tools
        for tool in "$@"; do
            # Look for the tool in all categories
            local found=false
            for category in tools-cli tools-gui tools-lang; do
                if [[ -d "$DOTFILES_DIR/$category/$tool" ]]; then
                    install_tool "$DOTFILES_DIR/$category/$tool"
                    found=true
                    break
                fi
            done
            
            if [[ "$found" == "false" ]]; then
                log_error "Tool '$tool' not found"
            fi
        done
    fi
    
    echo
    log_success "Installation complete!"
    log_info "Restart your shell or run 'source ~/.zshrc' to apply changes"
}

# Run main
main "$@"