#!/bin/bash
# Unified installer for dotfiles-ai
# Usage: ./install [target] [options]

set -e

# Configuration
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
STOW_DIR="$DOTFILES_DIR"
TARGET_DIR="$HOME"

# Source common utilities
source "$DOTFILES_DIR/utils/common.sh"

# Install Stow first
install_stow() {
    if command -v stow &> /dev/null; then
        log_success "GNU Stow is already installed"
        return 0
    fi
    
    log_info "Installing GNU Stow..."
    case "$OS" in
        macos)
            brew install stow
            ;;
        debian|mint)
            safe_sudo apt-get install -y stow
            ;;
        fedora)
            safe_sudo dnf install -y stow
            ;;
        arch)
            safe_sudo pacman -S --noconfirm stow
            ;;
        *)
            log_error "Please install GNU Stow manually for your OS"
            exit 1
            ;;
    esac
    log_success "GNU Stow installed"
}

# Install base system requirements
install_base() {
    log_info "Installing base system packages..."
    
    if [[ -x "$DOTFILES_DIR/system/$OS/install" ]]; then
        "$DOTFILES_DIR/system/$OS/install"
    elif [[ -x "$DOTFILES_DIR/system/$OS/setup.sh" ]]; then
        # Fallback to old setup.sh if it exists
        "$DOTFILES_DIR/system/$OS/setup.sh"
    else
        log_warning "No base setup found for $OS"
    fi
}

# Install a single tool
install_tool() {
    local tool_path="$1"
    local tool_name="$(basename "$tool_path")"
    
    log_info "Installing $tool_name..."
    
    # Run the tool's install script if it exists
    if [[ -x "$tool_path/install" ]]; then
        (cd "$tool_path" && ./install)
    elif [[ -x "$tool_path/setup.sh" ]]; then
        # Fallback to old setup.sh
        (cd "$tool_path" && ./setup.sh)
    else
        log_warning "No installer found for $tool_name"
    fi
    
    # Use stow for config files
    # Skip 1password as it manages its own configs directly
    if [[ "$tool_name" != "1password" ]]; then
        stow_configs "$tool_path"
    fi
}

# Install all tools in a category
install_category() {
    local category="$1"
    local category_path="$DOTFILES_DIR/$category"
    
    if [[ ! -d "$category_path" ]]; then
        log_error "Category $category not found"
        return 1
    fi
    
    log_info "Installing all $category..."
    
    # Priority tools to install first (if they exist)
    local priority_tools=("stow" "zsh" "tmux" "neovim")
    
    for tool in "${priority_tools[@]}"; do
        if [[ -d "$category_path/$tool" ]]; then
            install_tool "$category_path/$tool"
        fi
    done
    
    # Install remaining tools
    for tool_path in "$category_path"/*; do
        [[ -d "$tool_path" ]] || continue
        local tool_name="$(basename "$tool_path")"
        
        # Skip if already installed in priority
        if [[ " ${priority_tools[@]} " =~ " ${tool_name} " ]]; then
            continue
        fi
        
        install_tool "$tool_path"
    done
}

# Show usage
show_usage() {
    cat << EOF
Usage: ./install [target] [options]

Targets:
    (none)          Install everything
    all             Install everything
    cli             Install CLI tools only
    gui             Install GUI applications only
    lang            Install programming languages only
    ai              Install AI/MCP tools only
    <tool>          Install specific tool (e.g., neovim, docker)

Options:
    -h, --help      Show this help message
    -v, --verbose   Verbose output
    --no-base       Skip base system packages

Examples:
    ./install                    # Install everything
    ./install cli                # Install all CLI tools
    ./install neovim             # Install just Neovim
    ./install neovim zsh tmux    # Install multiple tools

EOF
}

# Main installation logic
main() {
    cd "$DOTFILES_DIR"
    
    # Parse arguments
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi
    
    detect_os
    log_info "Detected OS: $OS"
    
    # Run apt update once at the beginning for Debian/Mint systems
    if [[ "$OS" == "debian" ]] || [[ "$OS" == "mint" ]]; then
        safe_apt_update
    fi
    
    # Try to install stow first (continue even if it fails)
    install_stow || log_warning "Continuing without GNU Stow - configs won't be linked"
    
    # Determine what to install
    if [[ $# -eq 0 ]] || [[ "$1" == "all" ]]; then
        # Install everything
        log_info "Installing complete dotfiles environment..."
        install_base
        install_category "tools-cli"
        install_category "tools-lang"
        install_category "tools-gui"
        install_category "tools-ai"
        
    elif [[ "$1" == "cli" ]]; then
        # CLI tools only
        install_base
        install_category "tools-cli"
        
    elif [[ "$1" == "gui" ]]; then
        # GUI tools only
        install_category "tools-gui"
        
    elif [[ "$1" == "lang" ]]; then
        # Programming languages only
        install_category "tools-lang"
        
    elif [[ "$1" == "ai" ]]; then
        # AI tools only
        install_category "tools-ai"
        
    else
        # Install specific tools
        for tool in "$@"; do
            # Look for the tool in all categories
            local found=false
            for category in tools-cli tools-gui tools-lang tools-ai; do
                if [[ -d "$DOTFILES_DIR/$category/$tool" ]]; then
                    install_tool "$DOTFILES_DIR/$category/$tool"
                    found=true
                    break
                fi
            done
            
            if [[ "$found" == "false" ]]; then
                log_error "Tool '$tool' not found"
            fi
        done
    fi
    
    echo
    log_success "Installation complete!"
    log_info "Restart your shell or run 'source ~/.zshrc' to apply changes"
}

# Run main
main "$@"