# zsh configuration for dotfiles-ai
# Modern zsh setup with oh-my-zsh and custom enhancements

# Path to oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load
ZSH_THEME="agnoster"

# Plugins to load
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    docker
    kubectl
    aws
    node
    npm
    python
    rust
    golang
)

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# User configuration
export LANG=en_US.UTF-8
export EDITOR='nvim'
export VISUAL='nvim'

# History configuration
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_VERIFY
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_SPACE

# Directory navigation
unsetopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_SILENT

# Completion
setopt COMPLETE_ALIASES
setopt ALWAYS_TO_END
setopt AUTO_MENU
setopt AUTO_LIST
setopt AUTO_PARAM_SLASH
setopt COMPLETE_IN_WORD

# Custom aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias glog='git log --oneline --graph --decorate'

# Development aliases
alias tmux='tmux a || tmux'

# Directory shortcuts
alias dotfiles='cd ~/.dotfiles-ai'
alias projects='cd ~/projects'

# Aliases from old dotfiles
alias e='$EDITOR'
alias q='exit'
alias c=clear
alias br="bulk-rename"
alias pword='echo $(LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 32 | xargs)'
alias chromium-no-cors='open -n -a /Applications/Chromium.app/Contents/MacOS/Chromium --args --user-data-dir="/tmp/chrome_dev_test" --disable-web-security'
alias stray_port="lsof -i :"
alias napster='youtube-dl -x --audio-format=mp3'

# Cross-platform clipboard aliases (from old dotfiles)
if ! command -v pbcopy > /dev/null; then
  alias pbcopy="xclip -selection clipboard"
fi

if ! command -v pbpaste > /dev/null; then
  alias pbpaste="xclip -o -selection clipboard"
fi

# System-specific configurations
case "$(uname)" in
    Darwin)
        # macOS specific aliases and functions
        alias brewup='brew update && brew upgrade'
        alias o='open'
        
        # Add Homebrew to PATH if it exists
        if [[ -d "/opt/homebrew/bin" ]]; then
            export PATH="/opt/homebrew/bin:$PATH"
        fi
        ;;
    Linux)
        # Linux specific aliases and functions
        if command -v apt &> /dev/null; then
            alias aptup='sudo apt update && sudo apt upgrade'
            alias aptin='sudo apt install'
            alias apts='apt search'
        fi
        
        if command -v pacman &> /dev/null; then
            alias pacup='sudo pacman -Syu'
            alias pacin='sudo pacman -S'
            alias pacs='pacman -Ss'
        fi
        
        alias o='xdg-open'
        ;;
esac

# Custom functions
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract function for various archive types
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find and kill process by name
killp() {
    ps aux | grep $1 | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Weather function (requires curl)
weather() {
    curl -s "wttr.in/$1"
}

# Load Claude CLI aliases and functions if available
# Check multiple possible locations for the Claude configuration
for claude_config in "$HOME/.dotfiles-ai/claude/aliases.zsh" "$HOME/.dotfiles/claude/aliases.zsh" "./claude/aliases.zsh" "$(dirname "${(%):-%N}")/claude/aliases.zsh"; do
    if [[ -f "$claude_config" ]]; then
        source "$claude_config"
        break
    fi
done

# Load Claude personalities if available
for claude_personalities in "$HOME/.dotfiles-ai/claude/personalities.zsh" "$HOME/.dotfiles/claude/personalities.zsh" "./claude/personalities.zsh" "$(dirname "${(%):-%N}")/claude/personalities.zsh"; do
    if [[ -f "$claude_personalities" ]]; then
        source "$claude_personalities"
        break
    fi
done

# Load local customizations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Load environment variables
[[ -f ~/.env ]] && source ~/.env

# Source fzf if available
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Initialize Starship prompt if available
if command -v starship > /dev/null; then
    eval "$(starship init zsh)"
fi

# Automatic tmux session management
# Auto-connect to existing tmux session or create new one when terminal starts
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
    # Check if there are any existing tmux sessions
    if tmux list-sessions &> /dev/null; then
        # Attach to the first available session
        echo "ðŸ”— Connecting to existing tmux session..."
        exec tmux attach-session
    else
        # Create a new tmux session
        echo "ðŸš€ Starting new tmux session..."
        exec tmux new-session
    fi
fi

# Node Version Manager (if installed)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Rust environment
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# Go environment
export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin"

# Python environment
export PYTHONPATH="$HOME/.local/lib/python3.9/site-packages:$PYTHONPATH"
export PATH="$HOME/.local/bin:$PATH"
